// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

/*    14 13 12 11 10 9  8  7  6  5  4  3  2  1  0
 *    x  x  x  x  x  x  x  x  x  x  x  x  x  x  x
 *    ^  ^  ^
 *    |  |  |
 *    |  |  select upper vs lower SCREEN
 *    |  |
 *    |  select SCREEN vs KBD
 *    |
 *    select memory vs io 
 *
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:

    /* Select 0x0000-0x3fff (memory) v. 0x4000-0x6000 (io) */
    DMux(in=load, sel=address[14], a=memory, b=io);
    Mux16(a=memoryOut, b=ioOut, sel=address[14], out=out);

    /* Memory (0x000-0x3fff) */
    RAM16K(in=in, load=memory, address=address[0..13], out=memoryOut);

    /* Select 0x4000-0x5fff (screen) v. 0x6000 (keyboard) */
    DMux(in=io, sel=address[13], a=screen, b=kbd);
    Mux16(a=screenOut, b=kbdOut, sel=address[13], out=ioOut);

    /* Screen (0x4000-0x5fff) */
    DMux(in=screen, sel=address[12], a=screenUpper, b=screenLower);
    RAM4K(in=in, load=screenUpper, address=address[0..11], out=screenUpperOut);
    RAM4K(in=in, load=screenLower, address=address[0..11], out=screenLowerOut);
    Mux16(a=screenUpperOut, b=screenLowerOut, sel=address[12], out=screenOut);

    /* Keyboard (0x6000) */
    And16(a[0..12]=false, a[13]=true, a[14..15]=false, b[0..12]=false, b[13]=kbd, b[14..15]=false, out[13]=kbdAnd);
    Register(in=in, load=kbdAnd, out=kbdOut);
}
